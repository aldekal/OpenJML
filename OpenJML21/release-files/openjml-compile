#! /bin/bash

## This script compiles a user program that can then use OpenJML capabilties programmatically.
## As you can see, there are a large number of modules to be mentioned, and the list may change in the future, so it is encapsulated here.
## Not all programs will need all of these exports

# Use quotes to accommodate paths containing spaces
## realpath is needed to resolve symbolic links, but is not present on all OSes
## e.g. on Macs it must be installed (brew install coreutils)
if [ -n "`which realpath`" ] ; then
     R1=$(realpath "$BASH_SOURCE")
else R1="$BASH_SOURCE"
fi
R2=$(dirname "$R1")      # Gets directory holding this file
ROOT=$( cd "$R2" && pwd) # Converts to absolute path

# mac-setup is needed to fix Mac security complaints, though it is only
# needed once
if [ "$( uname )" = "Darwin" ] ; then
  "${ROOT}/mac-setup" > /tmp/openjmlsetup 2>&1 ;
fi

EXPORTS="--add-modules jdk.compiler,java.base --add-exports=jdk.compiler/org.jmlspecs.openjml=ALL-UNNAMED  --add-exports=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED --add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED --add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED --add-exports jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED --add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED --add-exports=jdk.compiler/org.jmlspecs.openjml=ALL-UNNAMED --add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED --add-exports=jdk.compiler/org.jmlspecs.openjml.proverinterface=ALL-UNNAMED --add-exports=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED --add-exports=jdk.compiler/org.jmlspecs.openjml.visitors=ALL-UNNAMED"

OPENJML_ROOT="$ROOT" "$ROOT/openjml" -p "$ROOT/jdk/modules" $EXPORTS --compile "$@"

